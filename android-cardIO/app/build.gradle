apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'android-maven'
apply plugin: 'signing'
apply plugin: 'io.codearte.nexus-staging'

repositories {
    mavenCentral()
}

ext {
    build_time = new Date().format("MM/dd/yyyy HH:mm:ss Z")
    build_year = new Date().format("yyyy")
    groupName = "loot"
    artifact = "cardIO"
    versionNameId = "5.5.1.31"
    versionCodeId = 31
}

task createPom {
    pom {
        project {
            groupId groupName
            artifactId artifact
            version versionNameId
        }
    }.writeTo("pom.xml")
}

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.2'

    group groupName    //group ID
    version versionNameId    //version

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion rootProject.ext.sdkVersion

        versionCode versionCodeId
        versionName versionNameId
        archivesBaseName = artifact    //artifact ID

        buildConfigField "String", "PRODUCT_NAME", "\"${artifact}\""
        buildConfigField "String", "PRODUCT_VERSION", "\"${versionNameId}\""
        buildConfigField "String", "BUILD_TIME", "\"${build_time}\""

        consumerProguardFiles 'release-proguard.cfg'

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    resourcePrefix 'cio_'

    sourceSets.main {
        jni.srcDirs = []
        jniLibs.srcDir 'src/main/libs'
    }

    buildTypes {
        debug {
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-build.cfg'
        }
    }

    task cleanNative(type: Exec, description: 'Clean JNI object files') {
        commandLine "$android.ndkDirectory/ndk-build",
                '-C', file('src/main/jni').absolutePath,
                'clean'
    }
    clean.dependsOn cleanNative

    task buildNative(type: Exec, description: 'Compile JNI source via NDK') {
        commandLine "$android.ndkDirectory/ndk-build",
                '-C', file('src/main/jni').absolutePath,
                '-j', Runtime.runtime.availableProcessors(),
                'all'
    }
    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn buildNative
    }

    tasks.whenTaskAdded { theTask ->
        if (theTask.name == "packageReleaseJniLibs"
                || theTask.name == "packageDebugJniLibs") {
            theTask.dependsOn(buildNative)
        }
    }
}

dependencies {
    compile 'com.android.support:support-v4:25.3.1'
    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.1.2'
}

// TODO remove the variant specific stuff from below - card.io doesn't have flavors

// ----------------  Javadocs ---------------

// More info here: http://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.javadoc.Javadoc.html
android.libraryVariants.all { variant ->
    def buildType = variant.buildType.name
    def variantName = variant.baseName


    if (buildType.equalsIgnoreCase("debug")) {
        return;
    }

    task "${variantName}Doc"(dependsOn: "compile${variantName.capitalize()}JavaWithJavac", type: Javadoc) {
        description = "Generates javadoc for build $name"
        destinationDir = new File(destinationDir, variantName)
        source = variant.javaCompile.source
        def variantCompiledClassesDir = file("${buildDir}/intermediates/classes/${variant.dirName}/")
        classpath = files(
                variant.javaCompile.classpath,
                variantCompiledClassesDir,
                android.bootClasspath
        )

        include 'io/card/payment/*.java'

        // More info on options here: http://www.gradle.org/docs/current/javadoc/org/gradle/external/javadoc/StandardJavadocDocletOptions.html
        // all of these options were copied from the ant build.  I don't know what half these options actually do.
        options.docTitle("<h1>card.io Android SDK</h1>")
        options.bottom("<i>Copyright &#169; 2012-${build_year} PayPal, Inc. All Rights Reserved.</i>")
        options.windowTitle("card.io Android SDK")
        options.author(true)
        options.version(true)
        options.use(true)
        options.setMemberLevel(JavadocMemberLevel.PUBLIC)

        // enables links to Java 7 docs
        options.links("http://docs.oracle.com/javase/7/docs/api/")
        // enables links to Android docs.
        options.linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference")
    }

    task javadocJar(type: Jar, dependsOn: "${variantName}Doc") {
        classifier = 'javadoc'
        from releaseDoc.destinationDir
    }

    // ------- MavenCentral publishing

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    nexusStaging {
        packageGroup = "io.card"
    }
}
